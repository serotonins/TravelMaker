Index: app/src/main/java/com/gumibom/travelmaker/ui/signup/idpw/SignupIdPwFramgnet.kt
===================================================================
diff --git a/app/src/main/java/com/gumibom/travelmaker/ui/signup/idpw/SignupIdPwFramgnet.kt b/app/src/main/java/com/gumibom/travelmaker/ui/signup/idpw/SignupIdPwFramgnet.kt
deleted file mode 100644
--- a/app/src/main/java/com/gumibom/travelmaker/ui/signup/idpw/SignupIdPwFramgnet.kt	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
+++ /dev/null	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
@@ -1,216 +0,0 @@
-package com.gumibom.travelmaker.ui.signup.idpw
-
-import android.content.Context
-import android.os.Bundle
-import android.text.Editable
-import android.text.TextWatcher
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Toast
-import androidx.core.content.ContextCompat
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.activityViewModels
-import androidx.fragment.app.viewModels
-import com.gumibom.travelmaker.R
-import com.gumibom.travelmaker.databinding.FragmentSignupIdPwBinding
-import com.gumibom.travelmaker.ui.signup.SignupActivity
-import com.gumibom.travelmaker.ui.signup.SignupViewModel
-import dagger.hilt.android.AndroidEntryPoint
-
-const val TAG = "SignupIdPwFramgnet"
-@AndroidEntryPoint
-class SignupIdPwFramgnet : Fragment() {
-
-    private lateinit var activity : SignupActivity
-    private var _binding :FragmentSignupIdPwBinding? = null
-    private val binding get() = _binding!!
-    private var isNextPage = false
-    private val signupViewModel : SignupViewModel by activityViewModels()
-    override fun onAttach(context: Context) {
-        super.onAttach(context)
-        activity = context as SignupActivity
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        _binding = FragmentSignupIdPwBinding.inflate(inflater,container,false)
-        return binding.root
-    }
-
-    // onViewCreated
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-        // Z. 이전/다음 버튼 활성화
-        backAndNextNaviBtn()
-        // Y. liveData가 지켜보다가 검사 돌리기
-        observeData()
-        // A-1. id_et가 비어 있으면 EditText에 error 표시 하기
-        // A-2. id_et의 내용으로 valid check 돌리기 -> 1. 성공 or 2. 실패
-        signupIdCheck()
-        // B. A에서 성공 하면, id_et 내용으로 dup check 돌리기(ViewModel,liveData, observe) -> 1. 성공 or 2. 실패
-        isDupId()
-        // D-1. pw_et가 비어 있으면 EditText에 error 표시 하기
-        // D-2. pw_et 내용으로 valid check 돌리기 -> 1. 성공 or 2. 실패
-        signupPwCheck()
-        // E. D 성공시, 다음 버튼 검정색으로 나오게 함...
-        setNextToggle()
-        // G. 지금 화면 종료
-        onDestroyView()
-    }
-
-    private fun backAndNextNaviBtn(){
-        val btnSignupPrevious = binding.btnSignup1Previous
-        val btnSignupNext = binding.btnSignup1Next
-        val errorSignupPw = binding.tilSignupPw.error
-
-        btnSignupPrevious.setOnClickListener {
-                activity.navigateToPreviousFragment()
-            }
-        if (errorSignupPw == null) {
-            btnSignupNext.setOnClickListener {
-                activity.navigateToNextFragment()
-            }
-        }
-    }
-
-    private fun observeData() {
-        signupViewModel.isDuplicatedId.observe(viewLifecycleOwner) { it ->
-            if (it == true) {
-                Toast.makeText(requireContext(), "중복된 아이디 입니다.", Toast.LENGTH_LONG).show()
-//                '중복된 아이디 입니다.' 라고 toast 뜨기
-            } else {
-                Toast.makeText(requireContext(), "가능한 아이디 입니다.", Toast.LENGTH_LONG).show()
-//                '사용가능한 아이디 입니다.' 라고 toast 뜨기
-            }
-        }
-    }
-
-    /*
-    signupIdCheck(){}
-    아이디의 유효성 검사와 중복 검사를 위한 ...부모 함수
-
-    id_et 가 비어 있으면 EditText에 error 표시 하기
-    id_et 내용으로 valid check 돌리기
-    둘다 성공하면 tilSignupId.error = null 됨
-     */
-    private fun signupIdCheck(){
-        binding.etSignupId.addTextChangedListener(object : TextWatcher {
-            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-//                TODO("Not yet implemented")
-            }
-            // id_et가 비어있으면 error 표시
-            // id_et가 유효성 검사를 통과 못하면 error 표시
-            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                val idContent = binding.etSignupId.text.toString()
-                if (idContent.isEmpty()){
-                    binding.tilSignupId.error = "ID를 입력 해주세요"
-                } else {
-                    binding.tilSignupId.error = null
-                }
-                if (!isValidateId(idContent)) {
-                    binding.tilSignupId.error = "유효하지 않은 ID 입니다."
-                } else {
-                    binding.tilSignupId.error = null
-                }
-            }
-            override fun afterTextChanged(p0: Editable?) {
-//                TODO("Not yet implemented")
-            }
-        })
-    }
-    /*
-    isValidateId(id: String): Boolean{}
-    아이디의 유효성 검사를 위한... 자식 함수
-    */
-    private fun isValidateId(id: String): Boolean {
-        if (id.length < 6 || !id.matches(Regex("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]+\$"))) {
-            return false // 유효성 검사 실패
-        }
-        return true // 유효성 검사 통과
-    }
-    /*
-    isDupId(){}
-    아이디의 중복 검사를 위한... 자식 함수
-    */
-    private fun isDupId(){
-        val isDupIdBtn = binding.btnSignupId
-
-        isDupIdBtn.setOnClickListener{
-            val idContents = binding.etSignupId.text.toString()
-            signupViewModel.checkId(idContents)
-        }
-        // 1. 중복검사 버튼을 누를때마 뷰모델에 liveData를 만들고
-        // 2. liveData에 옵저버를 달고
-        // 3. 값이 바뀔때마다
-        // 4. onChanged 메소드가 호출되는 것을 확인한다
-    }
-    /*
-    signupPwCheck(){}
-    비밀번호의 유효성 검사를 위한... 부모 함수
-    */
-    private fun signupPwCheck(){
-        binding.etSignupPw.addTextChangedListener(object : TextWatcher {
-            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-            }
-            // id_et가 비어있으면 error 표시
-            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                val pwContent = binding.etSignupPw.text.toString()
-                if (pwContent.isEmpty()){
-                    binding.tilSignupPw.error = "PW를 입력 해주세요"
-                } else {
-                    binding.tilSignupPw.error = null
-                }
-                if (!isValidatePw(pwContent)) {
-                    binding.tilSignupPw.error = "유효하지 않은 PW 입니다."
-                } else {
-                    binding.tilSignupPw.error = null
-                }
-            }
-            override fun afterTextChanged(p0: Editable?) {
-            }
-        })
-    }
-
-    override fun onDetach() {
-        super.onDetach()
-    }
-
-    /*
-    isValidatePw(pw: String): Boolean {}
-    비밀번호의 유효성 검사를 위한... 자식 함수
-    */
-    private fun isValidatePw(pw: String): Boolean {
-        // 비밀번호 길이 및 문자 조건 검사
-        if (pw.length < 8 || !pw.matches(Regex("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]+\$"))) {
-            return false // 유효성 검사 실패
-        }
-        return true // 유효성 검사 통과
-    }
-    /*
-    setNextToggle(){}
-    다음으로 넘어가는 버튼이 찐해지는 부모함수
-    */
-    private fun setNextToggle(){
-        val activeColor = ContextCompat.getColor(requireContext(), R.color.black)
-
-        signupViewModel.isDuplicatedId.observe(viewLifecycleOwner) {it ->
-            Log.d(TAG, "setNextToggle: ")
-            if (it == false){
-                // 이전 버튼의 색을 activeColor 로 변경하고, isNextPage 값을 true로 변경
-                binding.btnSignup1Next.setTextColor(activeColor)
-                isNextPage = true
-            // 중복된 아이디가 맞는 경우
-            }
-        }
-    }
-
-    // N. 마지막.
-    override fun onDestroyView() {
-        super.onDestroyView()
-    }
-}
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">travelmaker</string>\r\n    \r\n    <!-- 공용 문구 -->\r\n    <string name=\"signup_previous\">이전</string>\r\n    <string name=\"signup_next\">다음</string>\r\n\r\n    <!-- 회원가입 1 아이디 와 패스워드  -->\r\n    <string name=\"signup_idpw_title\">회원가입을 진행합니다.\\n아이디와 패스워드를 설정 해주세요.</string>\r\n    <string name=\"signup_hint_id_msg\">아이디를 입력해주세요</string>\r\n    <string name=\"signup_hint_pw_msg\">비밀번호를 입력해주세요</string>\r\n    <string name=\"signup_id_helper_msg\">영문, 숫자 포함 6자리 이상</string>\r\n    <string name=\"signup_pw_helper_msg\">영문, 숫자, 특수문자 포함 8자리 이상</string>\r\n    <string name=\"signup_label_id\">아이디</string>\r\n    <string name=\"signup_label_pw\">비밀번호</string>\r\n    <string name=\"signup_btn_check_dup_id\">중복확인</string>\r\n\r\n    <!-- 회원가입 2 닉네임 -->\r\n    <string name=\"signup_nickname_title\">사용하실 닉네임을 설정해주세요.</string>\r\n    <string name=\"signup_hint_nickname_msg\">닉네임을 입력해주세요</string>\r\n    <string name=\"signup_nickname_helper_msg\">프로필에 등록되는 닉네임으로\\n이후 변경이 불가합니다.</string>\r\n    <string name=\"signup_label_nickname\">닉네임</string>\r\n    <string name=\"signup_btn_check_dup_nickname\">중복확인</string>\r\n\r\n    <!-- 회원가입 3 동네인증   -->\r\n    <string name=\"signup_title\">동네인증을 해주세요!</string>\r\n    <string name=\"signup_title2\">본인이 살고 있는 곳을 검색해\\n입력해주세요.</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"signup_success_title\">가입이 완료되었습니다.</string>\r\n    <string name=\"signup_success_content\">로그인 화면으로 이동합니다.</string>\r\n\r\n    <!-- 회원가입 4 성별과 생년월일 -->\r\n    <string name=\"signup_genderbirth_title\">성별과 생년월일을\\n    선택해주세요.</string>\r\n    <string name=\"signup_genderbirth_hint_msg\">생년월일</string>\r\n    <string name=\"signup_genderbirth_helper_msg\">MM/DD/YYYY</string>\r\n    <string name=\"signup_gender_man\">남성</string>\r\n    <string name=\"signup_gender_woman\">여성</string>\r\n\r\n\r\n    <!-- 회원가입 6 프로필 String -->\r\n    <string name=\"sign_profile_guide\">프로필 사진과\\n나의 여행 관심사를 선택해주세요</string>\r\n    <string name=\"sign_category_guide\">나의 카테고리 선택</string>\r\n    <string name=\"sign_profile_name\">닉네임</string>\r\n    <!-- chip-->\r\n    <string name=\"sign_chip_active\">활동</string>\r\n    <string name=\"sign_chip_nature\">자연</string>\r\n    <string name=\"sign_chip_healing\">힐링</string>\r\n    <string name=\"sign_chip_picture\">사진</string>\r\n    <string name=\"sign_chip_culture\">문화</string>\r\n    <string name=\"sign_chip_taste\">맛집</string>\r\n    <string name=\"signup_phone_title\">휴대전화 번호를 입력하세요.</string>\r\n    <string name=\"signup_hint_phone_number\">전화번호</string>\r\n    <string name=\"signup_button_number\">인증 요청</string>\r\n    <string name=\"login_findPw_password\">비밀번호</string>\r\n    <string name=\"login_input_id\">아이디를 입력해주세요.</string>\r\n    <string name=\"login_input_password\">비밀번호를 입력해주세요.</string>\r\n    <string name=\"button_login\">로그인</string>\r\n    <string name=\"button_signup\">회원가입</string>\r\n    <string name=\"login_find_id\">아이디 찾기</string>\r\n    <string name=\"login_find_password\">비밀번호 찾기</string>\r\n    <!-- END -->\r\n    <!-- 회원가입 성공메시지 -->\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
+++ b/app/src/main/res/values/strings.xml	(date 1706853933943)
@@ -10,7 +10,7 @@
     <string name="signup_hint_id_msg">아이디를 입력해주세요</string>
     <string name="signup_hint_pw_msg">비밀번호를 입력해주세요</string>
     <string name="signup_id_helper_msg">영문, 숫자 포함 6자리 이상</string>
-    <string name="signup_pw_helper_msg">영문, 숫자, 특수문자 포함 8자리 이상</string>
+    <string name="signup_pw_helper_msg">영문, 숫자 포함 8자리 이상</string>
     <string name="signup_label_id">아이디</string>
     <string name="signup_label_pw">비밀번호</string>
     <string name="signup_btn_check_dup_id">중복확인</string>
Index: app/src/main/res/navigation/signup_nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/signup_nav_graph\"\r\n    app:startDestination=\"@id/signupIdPwFramgnet\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/signupLocationFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.location.SignupLocationFragment\"\r\n        android:label=\"SignupLocationFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_signupLocationFragment_to_signupGenderBirthdayFragment\"\r\n            app:destination=\"@id/signupGenderBirthdayFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupProfileFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.profile.SignupProfileFragment\"\r\n        android:label=\"SignupProfileFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_signupProfileFragment_to_signupSuccessFragment\"\r\n            app:destination=\"@id/signupSuccessFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupPhoneFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.phone.SignupPhoneFragment\"\r\n        android:label=\"SignupPhoneFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_signupPhoneFragment_to_signupProfileFragment\"\r\n            app:destination=\"@id/signupProfileFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupGenderBirthdayFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.genderbirth.SignupGenderBirthdayFragment\"\r\n        android:label=\"SignupGenderBirthdayFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_signupGenderBirthdayFragment_to_signupPhoneFragment\"\r\n            app:destination=\"@id/signupPhoneFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupIdPwFramgnet\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.idpw.SignupIdPwFramgnet\"\r\n        android:label=\"SignupIdPwFramgnet\" >\r\n        <action\r\n            android:id=\"@+id/action_signupIdPwFramgnet_to_signupNicknameFragment\"\r\n            app:destination=\"@id/signupNicknameFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/loginFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.login.LoginFragment\"\r\n        android:label=\"LoginFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_loginFragment_to_signupIdPwFramgnet\"\r\n            app:destination=\"@id/signupIdPwFramgnet\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupNicknameFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.nickname.SignupNicknameFragment\"\r\n        android:label=\"SignupNicknameFragment\" >\r\n        <action\r\n            android:id=\"@+id/action_signupNicknameFragment_to_signupLocationFragment\"\r\n            app:destination=\"@id/signupLocationFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/signupSuccessFragment\"\r\n        android:name=\"com.gumibom.travelmaker.ui.signup.success.SignupSuccessFragment\"\r\n        android:label=\"fragment_signup_success\"\r\n        tools:layout=\"@layout/fragment_signup_success\" />\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/signup_nav_graph.xml b/app/src/main/res/navigation/signup_nav_graph.xml
--- a/app/src/main/res/navigation/signup_nav_graph.xml	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
+++ b/app/src/main/res/navigation/signup_nav_graph.xml	(date 1706855108898)
@@ -39,7 +39,7 @@
     </fragment>
     <fragment
         android:id="@+id/signupIdPwFramgnet"
-        android:name="com.gumibom.travelmaker.ui.signup.idpw.SignupIdPwFramgnet"
+        android:name="com.gumibom.travelmaker.ui.signup.idpw.SignupIdPwFragment"
         android:label="SignupIdPwFramgnet" >
         <action
             android:id="@+id/action_signupIdPwFramgnet_to_signupNicknameFragment"
Index: app/src/main/java/com/gumibom/travelmaker/ui/signup/nickname/SignupNicknameFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gumibom.travelmaker.ui.signup.nickname\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport com.gumibom.travelmaker.R\r\nimport com.gumibom.travelmaker.databinding.FragmentSignupNicknameBinding\r\nimport com.gumibom.travelmaker.ui.signup.SignupActivity\r\nimport com.gumibom.travelmaker.ui.signup.SignupViewModel\r\nimport com.gumibom.travelmaker.ui.signup.idpw.TAG\r\nimport dagger.hilt.android.AndroidEntryPoint\r\n\r\nprivate const val TAG = \"SignupNicknameFramgnet\"\r\n@AndroidEntryPoint\r\nclass SignupNicknameFragment : Fragment(){\r\n    private lateinit var activity : SignupActivity\r\n    private var _binding :FragmentSignupNicknameBinding? = null\r\n    private val binding get() = _binding!!\r\n    private var isNextPage = false\r\n    private val signupViewModel : SignupViewModel by viewModels()\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        activity = context as SignupActivity\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val googleEmail = arguments?.getString(\"email\")\r\n        signupViewModel.email = googleEmail\r\n    }\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = FragmentSignupNicknameBinding.inflate(inflater,container,false)\r\n        return binding.root\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        // Z. 이전/다음 버튼 활성화\r\n        backAndNextNaviBtn()\r\n        // Y. liveData가 지켜보다가 검사 돌리기\r\n        observeData()\r\n        // A-1. nickname_et가 비어 있으면 EditText에 error 표시 하기\r\n        // A-2. nickname_et의 내용으로 valid check 돌리기 -> 1. 성공 or 2. 실패\r\n        signupNicknameCheck()\r\n        // B. A에서 성공 하면, id_et 내용으로 dup check 돌리기(ViewModel,liveData, observe) -> 1. 성공 or 2. 실패\r\n        isDupNickname()\r\n\r\n    }\r\n\r\n    private fun observeData() {\r\n        signupViewModel.isDuplicatedNickname.observe(viewLifecycleOwner) { it ->\r\n            if (it == true) {\r\n                Toast.makeText(requireContext(), \"중복된 닉네임 입니다.\", Toast.LENGTH_LONG).show()\r\n            } else {\r\n                Toast.makeText(requireContext(), \"가능한 닉네임 입니다.\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    signupNicknameCheck()\r\n    닉네임 유효성 검사와 중복검사를 위한... 부모 함수\r\n    */\r\n    private fun signupNicknameCheck(){\r\n        binding.etSignupNickname.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n            }\r\n            // nm_et가 비어있으면 error 표시\r\n            // nm_et가 유효성 검사를 통과 못하면 error 표시\r\n            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                val nicknameContent = binding.etSignupNickname.text.toString()\r\n                if (nicknameContent.isEmpty()){\r\n                    binding.tilSignupNickname.error = \"닉네임을 입력 해주세요\"\r\n                } else {\r\n                    binding.tilSignupNickname.error = null\r\n                }\r\n            }\r\n            override fun afterTextChanged(p0: Editable?) {\r\n            }\r\n        })\r\n    }\r\n\r\n    /*\r\n    isDupNickname()\r\n    닉네임 중복검사를 위한... 자식 함수\r\n    */\r\n\r\n    private fun isDupNickname(){\r\n        val isDupNicknameBtn = binding.btnSignupNickname\r\n\r\n        isDupNicknameBtn.setOnClickListener{\r\n            val nicknameContents = binding.etSignupNickname.text.toString()\r\n            signupViewModel.checkNickname(nicknameContents)\r\n        }\r\n        // 1. 중복검사 버튼을 누를때마 뷰모델에 liveData를 만들고\r\n        // 2. liveData에 옵저버를 달고\r\n        // 3. 값이 바뀔때마다\r\n        // 4. onChanged 메소드가 호출되는 것을 확인한다\r\n    }\r\n\r\n    private fun backAndNextNaviBtn(){\r\n        val btnSignupPrevious = binding.btnSignup2Previous\r\n        val btnSignupNext = binding.btnSignup2Next\r\n\r\n        btnSignupPrevious.setOnClickListener {\r\n            activity.navigateToPreviousFragment()\r\n        }\r\n        btnSignupNext.setOnClickListener {\r\n            activity.navigateToNextFragment()\r\n        }\r\n    }\r\n\r\n    /*\r\n    setNextToggle(){}\r\n    다음으로 넘어가는 버튼이 찐해지는 부모함수\r\n    */\r\n    private fun setNextToggle(){\r\n        val activeColor = ContextCompat.getColor(requireContext(), R.color.black)\r\n\r\n        signupViewModel.isDuplicatedNickname.observe(viewLifecycleOwner) {it ->\r\n            Log.d(TAG, \"setNextToggle: \")\r\n            if (it == false){\r\n                // 이전 버튼의 색을 activeColor 로 변경하고, isNextPage 값을 true로 변경\r\n                binding.btnSignup2Next.setTextColor(activeColor)\r\n                isNextPage = true\r\n                // 중복된 아이디가 맞는 경우\r\n            } else {\r\n                isNextPage = false\r\n            }\r\n        }\r\n    }\r\n\r\n    // N. 마지막.\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gumibom/travelmaker/ui/signup/nickname/SignupNicknameFragment.kt b/app/src/main/java/com/gumibom/travelmaker/ui/signup/nickname/SignupNicknameFragment.kt
--- a/app/src/main/java/com/gumibom/travelmaker/ui/signup/nickname/SignupNicknameFragment.kt	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
+++ b/app/src/main/java/com/gumibom/travelmaker/ui/signup/nickname/SignupNicknameFragment.kt	(date 1707027654528)
@@ -55,7 +55,7 @@
         // A-2. nickname_et의 내용으로 valid check 돌리기 -> 1. 성공 or 2. 실패
         signupNicknameCheck()
         // B. A에서 성공 하면, id_et 내용으로 dup check 돌리기(ViewModel,liveData, observe) -> 1. 성공 or 2. 실패
-        isDupNickname()
+
 
     }
 
@@ -86,6 +86,8 @@
                 } else {
                     binding.tilSignupNickname.error = null
                 }
+                isDupNickname()
+                setNextToggle()
             }
             override fun afterTextChanged(p0: Editable?) {
             }
Index: app/src/main/java/com/gumibom/travelmaker/ui/signup/genderbirth/SignupGenderBirthdayFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gumibom.travelmaker.ui.signup.genderbirth\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport com.gumibom.travelmaker.R\r\nimport com.gumibom.travelmaker.databinding.FragmentSignupGenderBirthdayBinding\r\nimport com.gumibom.travelmaker.ui.signup.SignupActivity\r\nimport com.gumibom.travelmaker.ui.signup.SignupViewModel\r\nimport com.gumibom.travelmaker.ui.signup.idpw.TAG\r\nimport dagger.hilt.android.AndroidEntryPoint\r\n\r\n@AndroidEntryPoint\r\nclass SignupGenderBirthdayFragment : Fragment(){\r\n    private lateinit var activity: SignupActivity;\r\n    private val signupViewModel: SignupViewModel by viewModels()\r\n    private var _binding:FragmentSignupGenderBirthdayBinding? = null\r\n    private val binding get() = _binding!!\r\n    private val isNextPage = false\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        activity = context as SignupActivity\r\n    }\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = FragmentSignupGenderBirthdayBinding.inflate(inflater,container,false)\r\n        return binding.root\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        backAndNextNaviBtn()\r\n    }\r\n    private fun backAndNextNaviBtn(){\r\n        val btnSignupPrevious = binding.btnSignup4Previous\r\n            btnSignupPrevious.setOnClickListener {\r\n            activity.navigateToPreviousFragment()\r\n        }\r\n        val btnSignupNext = binding.btnSignup4Next\r\n            btnSignupNext.setOnClickListener {\r\n            activity.navigateToNextFragment()\r\n        }\r\n    }\r\n    private fun setNextToggle(){\r\n        val activeColor = ContextCompat.getColor(requireContext(), R.color.black)\r\n\r\n        signupViewModel.isDuplicatedId.observe(viewLifecycleOwner) {it ->\r\n            Log.d(TAG, \"setNextToggle: \")\r\n            if (it == false){\r\n                // 이전 버튼의 색을 activeColor 로 변경하고, isNextPage 값을 true로 변경\r\n                binding.btnSignup4Next.setTextColor(activeColor)\r\n                isNextPage = true\r\n                // 중복된 아이디가 맞는 경우\r\n            }\r\n        }\r\n    }\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding= null\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gumibom/travelmaker/ui/signup/genderbirth/SignupGenderBirthdayFragment.kt b/app/src/main/java/com/gumibom/travelmaker/ui/signup/genderbirth/SignupGenderBirthdayFragment.kt
--- a/app/src/main/java/com/gumibom/travelmaker/ui/signup/genderbirth/SignupGenderBirthdayFragment.kt	(revision 9e8b0bab9160532b3d5861e4484e0a248b88c2d0)
+++ b/app/src/main/java/com/gumibom/travelmaker/ui/signup/genderbirth/SignupGenderBirthdayFragment.kt	(date 1707027654512)
@@ -22,7 +22,7 @@
     private val signupViewModel: SignupViewModel by viewModels()
     private var _binding:FragmentSignupGenderBirthdayBinding? = null
     private val binding get() = _binding!!
-    private val isNextPage = false
+    private var isNextPage = false
     override fun onAttach(context: Context) {
         super.onAttach(context)
         activity = context as SignupActivity
@@ -41,7 +41,7 @@
     }
     private fun backAndNextNaviBtn(){
         val btnSignupPrevious = binding.btnSignup4Previous
-            btnSignupPrevious.setOnClickListener {
+        btnSignupPrevious.setOnClickListener {
             activity.navigateToPreviousFragment()
         }
         val btnSignupNext = binding.btnSignup4Next
