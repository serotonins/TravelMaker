Index: app/src/main/java/com/gumibom/travelmaker/ui/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gumibom.travelmaker.ui.main\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport android.widget.ImageView\r\nimport androidx.activity.viewModels\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.fragment.NavHostFragment\r\nimport com.google.android.gms.tasks.OnCompleteListener\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.gumibom.travelmaker.R\r\nimport com.gumibom.travelmaker.data.dto.request.FcmTokenRequestDTO\r\nimport com.gumibom.travelmaker.databinding.ActivityMainBinding\r\nimport com.gumibom.travelmaker.model.User\r\nimport com.gumibom.travelmaker.ui.main.findmate.FindMateActivity\r\nimport com.gumibom.travelmaker.ui.signup.SignupViewModel\r\nimport com.gumibom.travelmaker.util.PermissionChecker\r\nimport com.gumibom.travelmaker.util.SharedPreferencesUtil\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nprivate const val TAG = \"MainActivity_싸피\"\r\n@AndroidEntryPoint\r\nclass MainActivity : AppCompatActivity() {\r\n    private var _binding: ActivityMainBinding? = null\r\n    private lateinit var sharedPreferencesUtil: SharedPreferencesUtil\r\n    private val binding get() = _binding!!\r\n    private lateinit var navController : NavController\r\n    private val viewModel : MainViewModel by viewModels()\r\n    private lateinit var user : User\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        Log.d(TAG, \"onCreate: @#!@#!@#\")\r\n        _binding = ActivityMainBinding.inflate(layoutInflater).apply {\r\n            navController = (supportFragmentManager.findFragmentById(R.id.fragment_container_main)\r\n                    as NavHostFragment).navController\r\n        }\r\n        setContentView(binding.root)\r\n        sharedPreferencesUtil = SharedPreferencesUtil(this)\r\n        user = sharedPreferencesUtil.getUser();\r\n        setFirebase()\r\n        observeViewModel()\r\n        setNavigationMenuToolbar()\r\n        initToolbar()\r\n    }\r\n    private fun setNavigationMenuToolbar(){\r\n        //프래그먼트가 ~~ 일 땐 ~~로\r\n        //프래그먼트가 ㅌㅌ 일 땐 ㅌㅌ 로\r\n        navController.addOnDestinationChangedListener { _, destination, _ ->\r\n            when (destination.id) {\r\n                R.id.mainFragment -> {\r\n                    Log.d(TAG, \"setNavigationMenuToolbar: 1\")\r\n                    binding.toolbar.menu.clear() // 기존 메뉴 제거\r\n                    binding.toolbar.inflateMenu(R.menu.menu_main) // 새 메뉴 설정\r\n                    binding.toolbar.title = \"메인 페이지\"\r\n                    binding.toolbar.navigationIcon = null\r\n                    Log.d(TAG, \"setNavigationMenuToolbar: 2\")\r\n                }\r\n                R.id.mainMyGroupFragment, R.id.mainFindMateFragment -> {\r\n                    binding.toolbar.menu.clear() // 기존 메뉴 제거\r\n                    binding.toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_24)\r\n                    binding.toolbar.title = \"HHHH\"\r\n                    binding.toolbar.setNavigationOnClickListener {\r\n                        Log.d(TAG, \"setNavigationMenuToolbar: \")\r\n                        navController.navigateUp()\r\n                    }\r\n                    binding.toolbar.inflateMenu(R.menu.detail_menu_main) // 새 메뉴 설정\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setFirebase(){\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->\r\n            if (!task.isSuccessful) {\r\n                Log.w(TAG, \"FCM 토큰 얻기에 실패하였습니다.\", task.exception)\r\n                return@OnCompleteListener\r\n            }\r\n            // token log 남기기\r\n            Log.d(TAG, \"token: ${task.result?:\"task.result is null\"}\")\r\n            if(task.result != null){\r\n                viewModel.uploadToken(FcmTokenRequestDTO(\"wnddnjs823\",task.result!!) )\r\n            }\r\n        })\r\n        createNotificationChannel(CHANNEL_ID, \"travelmaker\")\r\n    }\r\n    private fun createNotificationChannel(id: String, name: String) {\r\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\r\n        val channel = NotificationChannel(id, name, importance)\r\n        val notificationManager: NotificationManager =\r\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.createNotificationChannel(channel)\r\n\r\n    }\r\n    fun navigationToGotoTravel() {\r\n//        navController.navigate(R.id.action_mainFindMateFragment_to_mainFindMateDetailFragment)\r\n        navController.navigate(R.id.action_mainFragment_to_mainGoTravelFragment)\r\n    }\r\n    fun navigationToGroupMSG(){\r\n        navController.navigate(R.id.action_mainFragment_to_mainMyGroupFragment)\r\n    }\r\n    fun navigationToReadMyRecord(){\r\n        navController.navigate(R.id.action_mainFragment_to_mainMyRecordFragment)\r\n    }\r\n    fun navigationToLookAroundPam(){\r\n        navController.navigate(R.id.action_mainFragment_to_mainLookPamphletsFragment)\r\n    }\r\n\r\n    fun navigationPop() {\r\n        navController.navigateUp()\r\n    }\r\n\r\n    fun observeViewModel(){\r\n        viewModel.isUploadToken.observe(this){\r\n            if (it.isSuccess){\r\n                Log.d(TAG, \"서버통신 성공 : ${it.isSuccess}\")\r\n            }else{\r\n                Log.d(TAG, \"실패 데스 : ${it.isSuccess}\")\r\n            }\r\n        }\r\n    }\r\n    fun moveGoogleMap() {\r\n        val intent = Intent(this, FindMateActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return super.onOptionsItemSelected(item)\r\n\r\n    }\r\n    private fun initToolbar(){\r\n\r\n        binding.toolbar.setNavigationOnClickListener {\r\n            // Handle navigation icon press\r\n        }\r\n        val imageView = findViewById<ImageView>(R.id.my_custom_icon)\r\n        imageView.setOnClickListener {\r\n            Log.d(TAG, \"toolbarMypageClickListener: 123123123123\")\r\n        }\r\n\r\n        binding.toolbar.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_notify -> {\r\n                    Log.d(TAG, \"initToolbar: Noyigiyu\")\r\n                    true\r\n                }\r\n                R.id.action_search -> {\r\n                    Log.d(TAG, \"initToolbar:SEARYCDGC\")\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n\r\n        }\r\n    }\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        _binding = null //메모리 누수 방지\r\n    }\r\n\r\n    companion object {\r\n        // Notification Channel ID\r\n        const val CHANNEL_ID = \"travelmaker_channel\" //mainActivity의 채널\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gumibom/travelmaker/ui/main/MainActivity.kt b/app/src/main/java/com/gumibom/travelmaker/ui/main/MainActivity.kt
--- a/app/src/main/java/com/gumibom/travelmaker/ui/main/MainActivity.kt	(revision 779822533c75fb2df6c7c0ee2d539f5ef9f0f7d9)
+++ b/app/src/main/java/com/gumibom/travelmaker/ui/main/MainActivity.kt	(date 1707207733459)
@@ -93,7 +93,7 @@
             // token log 남기기
             Log.d(TAG, "token: ${task.result?:"task.result is null"}")
             if(task.result != null){
-                viewModel.uploadToken(FcmTokenRequestDTO("wnddnjs823",task.result!!) )
+
             }
         })
         createNotificationChannel(CHANNEL_ID, "travelmaker")
